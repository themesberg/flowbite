import Accordion from '../components/accordion';
import Carousel from '../components/carousel';
import Collapse from '../components/collapse';
import Dial from '../components/dial';
import Dismiss from '../components/dismiss';
import Drawer from '../components/drawer';
import Dropdown from '../components/dropdown';
import Modal, { initModalToggleTriggerByElement } from '../components/modal';
import Popover, { initPopoverByElement } from "../components/popover";
import Tabs, { initTabByElement } from "../components/tabs";
import Tooltip, { initTooltipByElement } from "../components/tooltip";
import InputCounter, { initInputCounterByElement } from "../components/input-counter";
import Clipboard from '../components/clipboard';
import Datepicker from '../components/datepicker';
import { RootElement } from '../dom/types';

declare global {
    interface Window {
        Accordion: typeof Accordion;
        Carousel: typeof Carousel;
        Collapse: typeof Collapse;
        Dial: typeof Dial;
        Dismiss: typeof Dismiss;
        Drawer: typeof Drawer;
        Dropdown: typeof Dropdown;
        Modal: typeof Modal;
        Popover: typeof Popover;
        Tabs: typeof Tabs;
        Tooltip: typeof Tooltip;
        InputCounter: typeof InputCounter;
        CopyClipboard: typeof Clipboard;
        Datepicker: typeof Datepicker;
        initDatepickers: ($rootElement?: RootElement) => void;
        initDatepickerByElement: ($datepickerEl: HTMLElement) => void;
        initAccordions: ($rootElement?: RootElement) => void;
        initAccordionByElement: ($accordionEl: HTMLElement) => void;
        initCarousels: ($rootElement?: RootElement) => void;
        initCarouselByElement: ($carouselEl: Element) => void;
        initCollapses: ($rootElement?: RootElement) => void;
        initCollapseByElement: ($triggerEl: Element) => void;
        initDials: ($rootElement?: RootElement) => void;
        initDialByElement: ($parentEl: Element) => void;
        initDismisses: ($rootElement?: RootElement) => void;
        initDismissByElement: ($triggerEl: Element) => void;
        initDrawers: ($rootElement?: RootElement) => void;
        initDrawerByElement: ($triggerEl: Element) => void;
        initDrawerToggleByElement: ($triggerEl: Element) => void;
        initDrawerShowByElement: ($triggerEl: Element) => void;
        initDropdowns: ($rootElement?: RootElement) => void;
        initDropdownByElement: ($triggerEl: Element) => void;
        initModals: ($rootElement?: RootElement) => void;
        initModalByElement: ($triggerEl: Element) => void;
        initModalToggleTriggerByElement: ($triggerEl: Element) => void;
        initModalShowTriggerByElement: ($triggerEl: Element) => void;
        initModalHideTriggerByElement: ($triggerEl: Element) => void;
        initPopovers: ($rootElement?: RootElement) => void;
        initPopoverByElement: ($triggerEl: Element) => void;
        initTabs: ($rootElement?: RootElement) => void;
        initTabByElement: ($parentEl: Element) => void;
        initTooltips: ($rootElement?: RootElement) => void;
        initTooltipByElement: ($triggerEl: Element) => void;
        initInputCounters: ($rootElement?: RootElement) => void;
        initInputCounterByElement: ($targetEl: Element) => void;
        initClipboards: ($rootElement?: RootElement) => void;
        initCopyClipboardByElement: ($triggerEl: Element) => void;
        initFlowbite: ($rootElement?: RootElement) => void;
        FlowbiteInstances: any;
    }
}
